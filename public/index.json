[
{
	"uri": "/1-create-s3-bucket-upload-file/",
	"title": "Create and Configure the S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Content:\nDeploying a Static Website Using Amazon S3 and CloudFront Deploying a static website using Amazon S3 and CloudFront is a popular, quick, and cost-effective solution. Follow the steps below to get started:\nStep 1: Create and Configure the S3 Bucket   Create an S3 Bucket\n Go to the AWS Management Console and select S3. Click “Create bucket.” Name your bucket (e.g., your-bucket-name) and choose the appropriate region. Disable the “Block all public access” option to allow public access to the bucket (or use CloudFront to restrict access).    Upload Website Files\n After creating the bucket, go into the bucket and upload your HTML, CSS, JavaScript, images, etc.    Configure the Bucket as a Static Website\n In the bucket, go to “Properties.” Find the “Static website hosting” section and enable it. Choose “Use this bucket to host a website” and specify the index document (e.g., index.html) and error document (e.g., 404.html).    "
},
{
	"uri": "/",
	"title": "Host Static Website on S3 and CloudFront",
	"tags": [],
	"description": "",
	"content": "Host Static Website on S3 and CloudFront Why Deploy a Static Website Using Amazon S3 and CloudFront? High Performance and Page Load Speed:  S3 stores static files (HTML, CSS, JS) on the cloud platform with automatic scaling and quick access. CloudFront is a Content Delivery Network (CDN) that helps distribute content to users from the nearest servers, reducing latency and increasing page load speed.  Cost Savings:  Deploying a static website on S3 is cost-effective, charging only based on storage and bandwidth usage, with no complex server management required. CloudFront optimizes bandwidth by caching content close to users, reducing direct access to S3 and thereby cutting costs.  Superior Scalability:  S3 and CloudFront automatically handle high traffic without complex configurations, suitable for websites with rapid growth needs. No worries about server overload when many users access the site simultaneously.  Enhanced Security:  CloudFront allows HTTPS setup, protecting data during transmission. Use Origin Access Control (OAC) to ensure only CloudFront has access to S3, protecting data from unauthorized access. AWS provides advanced security options like AWS WAF (Web Application Firewall) and Shield to protect websites from DDoS attacks.  Easy Management and Automation:  Configuring, deploying, and managing a static website is straightforward via AWS Console or by using Infrastructure as Code with AWS CloudFormation or Terraform. AWS offers automatic backup and recovery features, ensuring service continuity.  Integration with Other AWS Services:  Easily integrate with AWS Lambda, API Gateway, or AWS Amplify to create more complex web applications from a static base. AWS IAM can be used to manage access permissions, providing additional security control.  Benefits of Using S3 and CloudFront:  Faster Response Time: Content is distributed from the nearest edge locations to users through CloudFront, reducing page load time. Data Security and Access Control: Security settings help better control who can access your content. High Reliability: AWS services have a high SLA, ensuring website availability. SEO Optimization and User Experience: Fast page load speeds improve SEO rankings and overall user experience. No Complex Maintenance Required: No worries about server maintenance or regular software updates, reducing workload for the development team.  Deploying a static website using S3 and CloudFront is simple, cost-effective, and provides a fast, secure, and stable web experience for users!\nMain Content  Create and Configure the S3 Bucket Config permission S3 bucket Create CloudFront Distribution  "
},
{
	"uri": "/2-config-permission-s3-bucket/",
	"title": "Set Up Permissions",
	"tags": [],
	"description": "",
	"content": "Content:\nStep 2: Set Up Permissions   Configure the Bucket Policy to Allow Public Access\n  Go to the “Permissions” tab \u0026gt; “Bucket Policy” and add the following policy to allow public access:\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34;\r}\r]\r}\r    Verify Permissions\n Ensure the files in the bucket can be accessed publicly via direct URLs.    "
},
{
	"uri": "/3-create-cloudfront-distribution/",
	"title": "Set Up CloudFront to Speed Up Content Delivery",
	"tags": [],
	"description": "",
	"content": "Content:\nStep 3: Set Up CloudFront to Speed Up Content Delivery   Create a CloudFront Distribution\n Go to CloudFront in the AWS Management Console, select “Create Distribution.” In the “Origin” section, select the S3 bucket created earlier as the origin source. In “Origin access,” select \u0026ldquo;Origin Access Control (OAC)\u0026rdquo; to protect the S3 bucket, allowing access only from CloudFront. Set other parameters such as Cache Policy and Viewer Protocol Policy (HTTP and HTTPS).    Configure Other Settings\n Default Root Object: Set to index.html or your default file. Custom Domain (if applicable): Set up a custom domain by using AWS Certificate Manager (ACM) to issue a free SSL certificate.    Step 4: Update DNS with Route 53 (If Using a Custom Domain)  Configure Record Sets in Route 53  Point your domain to CloudFront by adding a Record Set with type CNAME or A (Alias).    Step 5: Test and Finalize  Access the CloudFront URL to ensure the website is working properly. Check page load speed and ensure all files are being distributed through CloudFront.  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]